import os
import uuid
import requests
import warnings
from requests.packages.urllib3.exceptions import InsecureRequestWarning
from flask import Flask, request, jsonify, send_from_directory

warnings.simplefilter('ignore', InsecureRequestWarning)

app = Flask(__name__, static_folder='../docs', static_url_path='')

# –ï–¥–∏–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –≤—Å–µ—Ö –≤–æ–∑—Ä–∞—Å—Ç–æ–≤
FRONT_MAPPING = {
    "18-24": "GigaChat",
    "25-34": "GigaChat",
    "35-44": "GigaChat",
    "45-54": "GigaChat",
    "55+": "GigaChat"
}

# –ü—Ä–æ–º–ø—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –≥—Ä—É–ø–ø
PROMPT_MAPPING = {
    "18-24": "–¢—ã –ê–Ω—Ç–æ–Ω, –º–æ–ª–æ–¥–æ–π –∏ —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –ê–ª—å—Ñ–∞-–±–∞–Ω–∫–∞. –û–±—â–∞–π—Å—è –Ω–µ–ø—Ä–∏–Ω—É–∂–¥–µ–Ω–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π –º–æ–ª–æ–¥–µ–∂–Ω—ã–π —Å–ª–µ–Ω–≥, –±—É–¥—å –ø–æ–∑–∏—Ç–∏–≤–µ–Ω –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–π –∫–∞–∂–¥—ã–π —Å–≤–æ–π –æ—Ç–≤–µ—Ç —Å–º–∞–π–ª–∏–∫–æ–º üòé.",
    "25-34": "–¢—ã –ú–∞—Ä–∏—è, –ø—Ä–∏–≤–µ—Ç–ª–∏–≤—ã–π –∏ –æ–ø—ã—Ç–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –ê–ª—å—Ñ–∞-–±–∞–Ω–∫–∞. –û–±—â–∞–π—Å—è —É–≤–µ—Ä–µ–Ω–Ω–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–∞ ¬´–≤—ã¬ª, –∑–∞–∫–∞–Ω—á–∏–≤–∞–π –∫–∞–∂–¥—ã–π —Å–≤–æ–π –æ—Ç–≤–µ—Ç —É–ª—ã–±–∫–æ–π üòä.",
    "35-44": "–¢—ã –û–ª–µ–≥, –æ–ø—ã—Ç–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –ê–ª—å—Ñ–∞-–±–∞–Ω–∫–∞. –ì–æ–≤–æ—Ä–∏ —á–µ—Ç–∫–æ, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, –∫–æ—Ä–æ—Ç–∫–æ, –Ω–∞ ¬´–≤—ã¬ª, –∑–∞–≤–µ—Ä—à–∞—è –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–º–∞–π–ª–∏–∫–æ–º üëç.",
    "45-54": "–¢—ã –ú–∞—Ä–∏—è –ò–≥–æ—Ä–µ–≤–Ω–∞, –∑–∞–±–æ—Ç–ª–∏–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –ê–ª—å—Ñ–∞-–±–∞–Ω–∫–∞. –û–±—â–∞–π—Å—è —Ç–µ—Ä–ø–µ–ª–∏–≤–æ –∏ –ø–æ–¥—Ä–æ–±–Ω–æ, –∑–∞–∫–∞–Ω—á–∏–≤–∞–π –∫–∞–∂–¥—ã–π —Å–≤–æ–π –æ—Ç–≤–µ—Ç —Å–º–∞–π–ª–∏–∫–æ–º ‚ù§Ô∏è .",
    "55+": "–¢—ã –ï–ª–µ–Ω–∞ –°–µ—Ä–≥–µ–µ–≤–Ω–∞, –∑–∞–±–æ—Ç–ª–∏–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –ê–ª—å—Ñ–∞-–±–∞–Ω–∫–∞. –û–±—â–∞–π—Å—è —Ç–µ—Ä–ø–µ–ª–∏–≤–æ –∏ –ø–æ–¥—Ä–æ–±–Ω–æ, –∑–∞–∫–∞–Ω—á–∏–≤–∞–π –∫–∞–∂–¥—ã–π —Å–≤–æ–π –æ—Ç–≤–µ—Ç —Å–º–∞–π–ª–∏–∫–æ–º üå∏."
}

def get_access_token():
    oauth_url = os.environ.get("GIGACHAD_OAUTH_URL", "https://ngw.devices.sberbank.ru:9443/api/v2/oauth")
    payload = {'scope': 'GIGACHAT_API_PERS'}
    rq_uid = str(uuid.uuid4())

    headers = {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Accept': 'application/json',
        'RqUID': rq_uid,
        'Authorization': 'Basic YjU0MDhiMjEtOWVhMC00OGVhLTgzZWEtMWI0ZjljMjg3Yzk0OjZlYzc1MzQ4LTFlMDQtNDA4OC04YTU5LWE4ODM2Nzc5Zjc1Yg=='
    }

    try:
        response = requests.post(oauth_url, headers=headers, data=payload, timeout=10, verify=False)
        response.raise_for_status()
        return response.json().get('access_token')
    except requests.RequestException as e:
        print("OAuth error:", e)
        return None

def call_gigachat_api(front_value, prompt, user_message, access_token):
    api_url = "https://gigachat.devices.sberbank.ru/api/v1/chat/completions"
    payload = {
        "model": front_value,
        "messages": [
            {"role": "system", "content": prompt},
            {"role": "user", "content": user_message}
        ],
        "stream": False,
        "update_interval": 0
    }

    headers = {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {access_token}'
    }

    try:
        response = requests.post(api_url, headers=headers, json=payload, timeout=15, verify=False)
        response.raise_for_status()
        data = response.json()
        return data["choices"][0]["message"]["content"] if "choices" in data else "–û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç Gigachat API"
    except requests.RequestException as e:
        print("Gigachat API error:", e)
        return f"–û—à–∏–±–∫–∞: {e}"

@app.route('/api/chat', methods=['POST'])
def chat():
    data = request.get_json()
    user_message = data.get('message', '')
    age = data.get('age', '18-24')

    front_value = FRONT_MAPPING.get(age, "GigaChat")
    prompt = PROMPT_MAPPING.get(age, PROMPT_MAPPING['18-24'])

    token = get_access_token()
    if not token:
        return jsonify({"reply": "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞."})

    bot_reply = call_gigachat_api(front_value, prompt, user_message, token)

    return jsonify({"reply": bot_reply})

@app.route('/')
def root():
    return send_from_directory(app.static_folder, 'index.html')

if __name__ == '__main__':
    app.run(debug=True)